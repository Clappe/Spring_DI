1、Spring 依赖注入

    Spring框架的核心功能之一就是通过依赖注入的方式来管理Bean之间的依赖关系。

    1.1 依赖注入

        每个基于应用程序的 java 都有几个对象，这些对象一起工作来呈现出终端用户所看到的工作的应用程序。当编写一个复杂的
        Java 应用程序时，应用程序类应该尽可能独立于其他 Java 类来增加这些类重用的可能性，并且在做单元测试时，测试独立于
        其他类的独立性。依赖注入（或有时称为布线）有助于把这些类粘合在一起，同时保持他们独立。

        假设你有一个包含文本编辑器组件的应用程序，并且你想要提供拼写检查。标准代码看起来是这样的：

        public class TextEditor {
           private SpellChecker spellChecker;
           public TextEditor() {
              spellChecker = new SpellChecker();
           }
        }
        在这里我们所做的就是创建一个 TextEditor 和 SpellChecker 之间的依赖关系。在控制反转的场景中，
        我们反而会做这样的事情：

        public class TextEditor {
           private SpellChecker spellChecker;
           public TextEditor(SpellChecker spellChecker) {
              this.spellChecker = spellChecker;
           }
        }
        在这里，TextEditor 不应该担心 SpellChecker 的实现。SpellChecker 将会独立实现，并且在 TextEditor 实例化的时候将
        提供给 TextEditor，整个过程是由 Spring 框架的控制。

        在这里，我们已经从 TextEditor 中删除了全面控制，并且把它保存到其他地方（即 XML 配置文件），且依赖关系
        即 SpellChecker 类）通过类构造函数被注入到 TextEditor 类中。因此，控制流通过依赖注入（DI）已经“反转”，
        因为你已经有效地委托依赖关系到一些外部系统。

        依赖注入的第二种方法是通过 TextEditor 类的 Setter 方法，我们将创建 SpellChecker 实例，该实例将被用于调用
        setter 方法来初始化 TextEditor 的属性。

        因此，DI 主要有两种变体和下面的两个子章将结合实例涵盖它们：

        序号	依赖注入类型 & 描述
        1	Constructor-based dependency injection
        当容器调用带有多个参数的构造函数类时，实现基于构造函数的 DI，每个代表在其他类中的一个依赖关系。

        2	Setter-based dependency injection
        基于 setter 方法的 DI 是通过在调用无参数的构造函数或无参数的静态工厂方法实例化 bean 之后容器调用 beans
        的 setter 方法来实现的。

        你可以混合这两种方法，基于构造函数和基于 setter 方法的 DI，然而使用有强制性依存关系的构造函数和有可选依赖关系的
        setter是一个好的做法。

        代码是 DI 原理的清洗机，当对象与它们的依赖关系被提供时，解耦效果更明显。
        对象不查找它的依赖关系，也不知道依赖关系的位置或类，而这一切都由 Spring 框架控制的。

2、Spring 基于构造函数的依赖注入

    2.1 创建两个类ConstructorBased_DI_TextEditor.java和ConstructorBased_DI_SpellChecker.java以及测试类
        ConstructorBased_DI_Main.java,编写代码，配置好bean并运行。

         <bean id="ConstructorBased_DI_TextEditor" class="com.DepedenceInject.ConstructorBased_DI_TextEditor">
                <constructor-arg ref="ConstructorBased_DI_SpellChecker"/>
         </bean>

         <bean id="ConstructorBased_DI_SpellChecker" class="com.DepedenceInject.ConstructorBased_DI_SpellChecker">
         </bean>

    2.2 构造函数参数解析:
        如果存在不止一个参数时，当把参数传递给构造函数时，可能会存在歧义。要解决这个问题，那么构造函数的参数在 bean
        定义中的顺序就是把这些参数提供给适当的构造函数的顺序就可以了。考虑下面的类:

        package x.y;
        public class Foo {
           public Foo(Bar bar, Baz baz) {
              // ...
           }
        }
        下述配置文件工作顺利：

        <beans>
           <bean id="foo" class="x.y.Foo">
              <constructor-arg ref="bar"/>
              <constructor-arg ref="baz"/>
           </bean>

           <bean id="bar" class="x.y.Bar"/>
           <bean id="baz" class="x.y.Baz"/>
        </beans>
        让我们再检查一下我们传递给构造函数不同类型的位置。考虑下面的类：

        package x.y;
        public class Foo {
           public Foo(int year, String name) {
              // ...
           }
        }
        如果你使用 type 属性显式的指定了构造函数参数的类型，容器也可以使用与简单类型匹配的类型。例如：

        <beans>

           <bean id="exampleBean" class="examples.ExampleBean">
              <constructor-arg type="int" value="2001"/>
              <constructor-arg type="java.lang.String" value="Zara"/>
           </bean>

        </beans>
        最后并且也是最好的传递构造函数参数的方式，使用 index 属性来显式的指定构造函数参数的索引。
        下面是基于索引为 0 的例子，如下所示：

        <beans>

           <bean id="exampleBean" class="examples.ExampleBean">
              <constructor-arg index="0" value="2001"/>
              <constructor-arg index="1" value="Zara"/>
           </bean>

        </beans>
        最后，如果你想要向一个对象传递一个引用，你需要使用 标签的 ref 属性，如果你想要直接传递值，
        那么你应该使用如上所示的 value 属性。

3、Spring 基于设值函数的依赖注入

    3.1 Spring 基于设值函数的依赖注入
        当容器调用一个无参的构造函数或一个无参的静态 factory 方法来初始化你的 bean 后，通过容器在你的 bean 上调用
        设值函数，基于设值函数的 DI 就完成了

    3.2 创建SetterBased_DI_TextEditor.java和SetterBased_DI_SpellChecker.java以及测试函数SetterBased_DI_Main.java，编写
        代码，配置好xml文件并运行。

4、Spring 注入内部 Beans

    4.1 注入内部 Beans
        正如你所知道的 Java 内部类是在其他类的范围内被定义的，同理，inner beans 是在其他 bean 的范围内定义的 bean。

    4.2 创建InnerBeans_Inject_TextEditor.java和InnnerBeans_Inject_SpellChecker.java以及测试类InnerBeans_Inject_Maian.java，
        编写代码并配置好bean,然后运行。bean的配置如下：
               <bean id="InnerBeans_Inject_TextEditor" class="com.DepedenceInject.InnerBeans_Inject_TextEditor">
                    <property name="innerBeans_inject_spellChecker">
                        <bean id="InnerBeans_Inject_SpellChecker" class="com.DepedenceInject.InnerBeans_Inject_SpellChecker"></bean>
                    </property>
                </bean>

5、Spring 注入集合

    5.1 注入集合
        你已经看到了如何使用 value 属性来配置基本数据类型和在你的 bean 配置文件中使用<property>标签的 ref 属性来配置对象
        引用。这两种情况下处理奇异值传递给一个 bean。

        现在如果你想传递多个值，如 Java Collection 类型 List、Set、Map 和 Properties，应该怎么做呢。
        为了处理这种情况，Spring 提供了四种类型的集合的配置元素，如下所示：

        元素	描述
        <list>	它有助于连线，如注入一列值，允许重复。
        <set>	它有助于连线一组值，但不能重复。
        <map>	它可以用来注入名称-值对的集合，其中名称和值可以是任何类型。
        <props>	它可以用来注入名称-值对的集合，其中名称和值都是字符串类型。

        你可以使用<list>或<set>来连接任何 java.util.Collection 的实现或数组。

        你会遇到两种情况（a）传递集合中直接的值（b）传递一个 bean 的引用作为集合的元素。

    5.2 创建CollectionInjection_JavaCollection.java/CollectionInjection_Address.java和CollectionInjection_Main.java,
        配置好bean,其中配置集合采用了传递集合中的值以及传递一个bean的引用两种方法。

            <bean id="CollectionInjection_JavaCollection" class="com.DepedenceInject.CollectionInjection_JavaCollection">
                <property name="addressList">
                     <list>
                         <!--传递集合中的值-->
                         <value>INDIA</value>
                         <value>Pakistan</value>
                         <value>USA</value>
                         <value>USA</value>
                         <!--传递bean的引用-->
                         <ref bean="CollectionInjection_Address"/>
                     </list>
                </property>

                <property name="addressSet">
                    <set>
                        <value>INDIA</value>
                        <value>Pakistan</value>
                        <value>USA</value>
                        <value>USA</value>
                        <ref bean="CollectionInjection_Address"/>
                    </set>
                </property>

                <property name="addressMap">
                    <map>
                        <entry key="1" value="INDIA"></entry>
                        <entry key="2" value="Pakistan"/>
                        <entry key="3" value="USA"/>
                        <entry key="4" value="USA"/>
                        <entry key="5" value-ref="CollectionInjection_Address"/>
                    </map>
                </property>

                <property name="addressProperties">
                    <props>
                        <prop key="one">INDIA</prop>
                        <prop key="two">Pakistan</prop>
                        <prop key="three">USA</prop>
                        <prop key="four">USA</prop>
                    </props>
                </property>
            </bean>

            <bean id="CollectionInjection_Address" class="com.DepedenceInject.CollectionInjection_Address"></bean>

    5.3 为了使用上面的 bean 定义，你需要定义 setter 方法，它们应该也能够是用这种方式来处理引用。

    5.4 注入 null 和空字符串的值

        5.4.1 如果你需要传递一个空字符串作为值，那么你可以传递它，如下所示：
              <!--传入空字符串-->
              <property name="address" value=""/>

        5.4.2 如果你需要传递一个 NULL 值，那么你可以传递它，如下所示：
            <!--传入NULL值-->
            <property name="email"><null></null></property>


